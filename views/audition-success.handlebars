{{! views/audition-success.handlebars }}
{{> header}}
<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-lg-8">
      <!-- Success Animation -->
      <div class="text-center mb-4">
        <div class="success-checkmark">
          <div class="check-icon">
            <span class="icon-line line-tip"></span>
            <span class="icon-line line-long"></span>
            <div class="icon-circle"></div>
            <div class="icon-fix"></div>
          </div>
        </div>        <h1 class="display-5 mt-4 mb-3" style="color: var(--primary-red);">Audition Submitted Successfully!</h1>
        <p class="lead text-muted">Thank you {{actor_name}} for your submission</p>
      </div>

      <!-- Submission Details Card -->
      <div class="card shadow-sm mb-4" style="border-color: var(--primary-red);">
        <div class="card-header text-white" style="background-color: var(--primary-red);">
          <h5 class="mb-0">
            <i class="fas fa-check-circle me-2"></i>
            Submission Details
          </h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6 mb-3">
              <h6 class="text-muted mb-1">Project</h6>
              <p class="mb-0 fw-semibold">{{project.name}}</p>
            </div>
            <div class="col-md-6 mb-3">
              <h6 class="text-muted mb-1">Role</h6>
              <p class="mb-0 fw-semibold">{{role}}</p>
            </div>
            <div class="col-md-6 mb-3">
              <h6 class="text-muted mb-1">Actor</h6>
              <p class="mb-0">{{actor_name}}</p>
            </div>
            <div class="col-md-6 mb-3">
              <h6 class="text-muted mb-1">Email</h6>
              <p class="mb-0">{{email}}</p>
            </div>
            {{#if phone}}
            <div class="col-md-6 mb-3">
              <h6 class="text-muted mb-1">Phone</h6>
              <p class="mb-0">{{phone}}</p>
            </div>
            {{/if}}
            <div class="col-md-6 mb-3">
              <h6 class="text-muted mb-1">Submitted</h6>
              <p class="mb-0">{{submitted_time}}</p>
            </div>
          </div>
        </div>
      </div>      <!-- Media Uploads -->
      {{#if video_url}}
      <div class="card shadow-sm mb-4" style="border-color: var(--primary-red);">
        <div class="card-header text-white" style="background-color: var(--primary-red);">
          <h5 class="mb-0">
            <i class="fas fa-video me-2"></i>
            Your Video Submission
          </h5>
        </div>        <div class="card-body">
          {{#if (eq video_type "cloudflare_stream")}}
            <div id="video-container">              <!-- Processing indicator -->
              <div id="video-processing" class="text-center p-5" style="display: block;">
                <!-- Large red spinner -->
                <div class="d-flex justify-content-center mb-4">
                  <div class="spinner-border" role="status" style="color: var(--primary-red); width: 4rem; height: 4rem; border-width: 0.3em;">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                </div>
                  <!-- Processing message -->
                <h5 class="mb-3" style="color: var(--primary-red);">
                  <i class="fas fa-cog fa-spin me-2"></i>
                  Processing Your Video...
                </h5>
                <p class="text-muted mb-4">Your video has been successfully uploaded and is being optimized for playback. This usually takes 30 seconds to 2 minutes.</p>
                
                <!-- Progress bar -->
                <div class="progress mb-3" style="height: 8px;">
                  <div class="progress-bar" role="progressbar" style="background-color: var(--primary-red); width: 0%" id="processing-progress"></div>
                </div>
                
                <!-- Status text -->
                <small class="text-muted">
                  <i class="fas fa-shield-alt me-1"></i>
                  Checking video readiness...
                </small>
              </div>
                <!-- Video player (hidden initially) -->
              <div id="video-player" style="display: none;">
                <div class="ratio ratio-16x9 mb-3">
                  <iframe 
                    src="https://iframe.videodelivery.net/{{video_url}}" 
                    frameborder="0" 
                    allowfullscreen
                    allow="accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;"
                    class="rounded w-100 h-100">
                  </iframe>
                </div>
              </div>
            </div>
            <div class="alert alert-info">
              <i class="fas fa-shield-alt me-2"></i>
              <strong>Secure Upload:</strong> Your video is privately hosted and only accessible to casting directors.
            </div>
          {{else if (eq video_type "youtube")}}
            <div class="ratio ratio-16x9 mb-3">
              <iframe 
                src="https://www.youtube.com/embed/{{video_url}}" 
                frameborder="0" 
                allowfullscreen
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                class="rounded w-100 h-100">
              </iframe>
            </div>
            <div class="d-flex align-items-center">
              <i class="fab fa-youtube text-danger me-2"></i>
              <a href="{{video_url}}" target="_blank" class="btn btn-outline-danger btn-sm">
                View on YouTube
              </a>
            </div>
          {{/if}}
        </div>
      </div>
      {{/if}}      {{#if profile_pictures.length}}
      <div class="card shadow-sm mb-4" style="border-color: var(--primary-red);">
        <div class="card-header text-white" style="background-color: var(--primary-red);">
          <h5 class="mb-0">
            <i class="fas fa-images me-2"></i>
            Profile Pictures
          </h5>
        </div>
        <div class="card-body">
          <div class="row g-3">
            {{#each profile_pictures}}
            <div class="col-md-4">
              <div class="card border-0 shadow-sm">
                <img src="{{this.url}}" class="card-img-top rounded" alt="Profile picture" style="height: 200px; object-fit: cover;">
              </div>
            </div>
            {{/each}}
          </div>
        </div>
      </div>
      {{/if}}      {{#if showreel_url}}
      <div class="card shadow-sm mb-4" style="border-color: var(--primary-red);">
        <div class="card-header text-white" style="background-color: var(--primary-red);">
          <h5 class="mb-0">
            <i class="fas fa-film me-2"></i>
            Showreel
          </h5>
        </div>
        <div class="card-body">
          <a href="{{showreel_url}}" target="_blank" class="btn" style="background-color: var(--primary-red); border-color: var(--primary-red); color: white;">
            <i class="fas fa-external-link-alt me-2"></i>
            View Showreel
          </a>
        </div>
      </div>
      {{/if}}

      <!-- Next Steps -->
      <div class="card border-secondary shadow-sm mb-4">
        <div class="card-header bg-secondary text-white">
          <h5 class="mb-0">
            <i class="fas fa-clock me-2"></i>
            What Happens Next?
          </h5>
        </div>
        <div class="card-body">
          <div class="row">            <div class="col-md-4 text-center mb-3">
              <div class="bg-light rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                <i class="fas fa-eye" style="color: var(--primary-red);" class="fs-4"></i>
              </div>
              <h6 class="mt-2">Review</h6>
              <p class="small text-muted">Casting directors will review your submission</p>
            </div>            <div class="col-md-4 text-center mb-3">
              <div class="bg-light rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                <i class="fas fa-phone fs-4" style="color: var(--primary-red);"></i>
              </div>
              <h6 class="mt-2">Contact</h6>
              <p class="small text-muted">If selected, we'll contact you directly</p>
            </div>
            <div class="col-md-4 text-center mb-3">
              <div class="bg-light rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                <i class="fas fa-star" style="color: var(--primary-red);" class="fs-4"></i>
              </div>
              <h6 class="mt-2">Audition</h6>
              <p class="small text-muted">Further auditions may be scheduled</p>
            </div>
          </div>
        </div>
      </div>      <!-- Action Buttons -->
      <div class="text-center mb-5">
        <a href="/audition/{{project.id}}" class="btn me-3" style="background-color: var(--primary-red); border-color: var(--primary-red); color: white;">
          <i class="fas fa-plus me-2"></i>
          Submit Another Audition
        </a>
        <a href="/projects" class="btn btn-outline-secondary">
          <i class="fas fa-list me-2"></i>
          View All Projects
        </a>
      </div>

      <!-- Contact Information -->
      <div class="text-center text-muted">
        <p>
          <i class="fas fa-envelope me-2"></i>
          Questions? Contact us at 
          <a href="mailto:casting@hilayuval.com">casting@hilayuval.com</a>
        </p>
      </div>
    </div>
  </div>
</div>

<!-- Custom CSS for success animation -->
<style>
/* Card border fixes */
.card {
  border-radius: 0.375rem !important;
  overflow: hidden;
}

.card-header {
  border-bottom: 1px solid rgba(0,0,0,.125);
  border-top-left-radius: calc(0.375rem - 1px) !important;
  border-top-right-radius: calc(0.375rem - 1px) !important;
}

.card-body {
  border-bottom-left-radius: calc(0.375rem - 1px) !important;
  border-bottom-right-radius: calc(0.375rem - 1px) !important;
}

.success-checkmark {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  display: block;
  stroke-width: 3;
  stroke: var(--primary-red);
  stroke-miterlimit: 10;
  margin: 10px auto;
  box-shadow: inset 0px 0px 0px var(--primary-red);
  animation: fill .4s ease-in-out .4s forwards, scale .3s ease-in-out .9s both;
  position: relative;
}

.success-checkmark .check-icon {
  width: 56px;
  height: 56px;
  position: absolute;
  left: 12px;
  top: 12px;
  border-radius: 50%;
  border: 3px solid var(--primary-red);
  background: var(--primary-red);
}

.success-checkmark .check-icon::before {
  content: '';
  width: 100%;
  height: 100%;
  background: var(--primary-red);
  border-radius: 50%;
  position: absolute;
  left: 0;
  top: 0;
  animation: pulse 2s ease-in-out infinite;
}

.success-checkmark .icon-line {
  height: 3px;
  background: white;
  display: block;
  border-radius: 2px;
  position: absolute;
  z-index: 10;
}

.success-checkmark .icon-line.line-tip {
  top: 26px;
  left: 14px;
  width: 15px;
  transform: rotate(45deg);
  animation: icon-line-tip 0.75s;
}

.success-checkmark .icon-line.line-long {
  top: 31px;
  right: 8px;
  width: 30px;
  transform: rotate(-45deg);
  animation: icon-line-long 0.75s;
}

@keyframes pulse {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  50% {
    transform: scale(1.1);
    opacity: 0.8;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes icon-line-tip {
  0% {
    width: 0;
    left: 1px;
    top: 19px;
  }
  54% {
    width: 0;
    left: 1px;
    top: 19px;
  }
  70% {
    width: 15px;
    left: -8px;
    top: 37px;
  }
  84% {
    width: 17px;
    left: 21px;
    top: 48px;
  }
  100% {
    width: 15px;
    left: 14px;
    top: 26px;
  }
}

@keyframes icon-line-long {
  0% {
    width: 0;
    right: 46px;
    top: 54px;
  }
  65% {
    width: 0;
    right: 46px;
    top: 54px;
  }
  84% {
    width: 30px;
    right: 0px;
    top: 17px;
  }
  100% {
    width: 30px;
    right: 8px;
    top: 31px;
  }
}

@keyframes fill {
  100% {
    box-shadow: inset 0px 0px 0px 30px var(--primary-red);
  }
}

@keyframes scale {
  0%, 100% {
    transform: none;
  }
  50% {
    transform: scale3d(1.1, 1.1, 1);
  }
}
</style>

{{> footer}}

<!-- Cloudflare Stream Video Status Checker -->
{{#if (eq video_type "cloudflare_stream")}}
<script>
// Simplified video monitoring based on Cloudflare Stream documentation
class VideoMonitor {
  constructor(videoUid) {
    this.videoUid = videoUid;
    this.isVideoReady = false;
    this.checkCount = 0;
    this.maxChecks = 30; // Reduced since videos are playable sooner
    this.destroyed = false;
    
    console.log('VideoMonitor initialized for:', videoUid);
  }
  
  start() {
    console.log('Starting video processing monitoring...');
    // Start checking immediately since CF docs say videos in "ready" state are playable
    this.checkVideoStatus();
  }
  
  destroy() {
    this.destroyed = true;
    console.log('VideoMonitor destroyed');
  }
  
  checkVideoStatus() {
    if (this.destroyed || this.isVideoReady) return;
    
    this.checkCount++;
    console.log(`Video status check #${this.checkCount}/${this.maxChecks} for ${this.videoUid}`);
    
    this.updateProgress();
    
    // Check API status
    this.checkAPI()
      .then(apiResult => {
        if (this.destroyed) return;
        
        if (apiResult.ready) {
          console.log('API confirmed video ready, showing player...');
          this.showVideo();
        } else {
          console.log('API says not ready, scheduling next check...');
          this.scheduleNextCheck();
        }
      })
      .catch(error => {
        if (this.destroyed) return;
        
        console.warn('API check failed:', error);
        // If we've tried several times and API is failing, try iframe test
        if (this.checkCount >= 5) {
          console.log('Multiple API failures, trying direct iframe test...');
          this.testIframeDirectly();
        } else {
          this.scheduleNextCheck();
        }
      });
  }
  
  async checkAPI() {
    try {
      const response = await fetch(`/api/video-status/${this.videoUid}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('API Response:', data);
      
      if (data.success) {
        // Based on CF docs: videos are playable when state is "ready"
        if (data.status === 'ready' || data.readyToStream) {
          return { ready: true, confidence: data.confidence || 'medium' };
        }
      }
      
      return { ready: false };
    } catch (error) {
      console.error('API request failed:', error);
      throw error;
    }
  }
  
  testIframeDirectly() {
    console.log('Testing video readiness with direct iframe...');
    
    // Create a small test iframe to see if video loads
    const testContainer = document.createElement('div');
    testContainer.style.position = 'absolute';
    testContainer.style.left = '-10000px';
    testContainer.style.width = '1px';
    testContainer.style.height = '1px';
    testContainer.style.overflow = 'hidden';
    
    const testIframe = document.createElement('iframe');
    testIframe.style.width = '1px';
    testIframe.style.height = '1px';
    testIframe.src = `https://iframe.videodelivery.net/${this.videoUid}`;
    
    let testTimeout = setTimeout(() => {
      console.log('Direct iframe test timeout');
      this.cleanupTest(testContainer);
      this.scheduleNextCheck();
    }, 10000);
    
    let loadHandled = false;
    
    testIframe.onload = () => {
      if (loadHandled) return;
      loadHandled = true;
      
      console.log('Direct iframe test successful - video ready!');
      clearTimeout(testTimeout);
      this.cleanupTest(testContainer);
      this.showVideo();
    };
    
    testIframe.onerror = () => {
      if (loadHandled) return;
      loadHandled = true;
      
      console.log('Direct iframe test failed');
      clearTimeout(testTimeout);
      this.cleanupTest(testContainer);
      this.scheduleNextCheck();
    };
    
    testContainer.appendChild(testIframe);
    document.body.appendChild(testContainer);
  }
  
  cleanupTest(container) {
    try {
      if (container && container.parentNode) {
        container.parentNode.removeChild(container);
      }
    } catch (e) {
      console.warn('Error cleaning up test container:', e);
    }
  }
  
  updateProgress() {
    // More realistic progress based on typical processing times
    let progress;
    if (this.checkCount <= 2) {
      progress = 15 + (this.checkCount * 20); // 15-55% for first 2 checks
    } else if (this.checkCount <= 5) {
      progress = 55 + ((this.checkCount - 2) * 10); // 55-85% next 3 checks
    } else {
      progress = 85 + Math.min((this.checkCount - 5) * 2, 15); // Slowly to 100%
    }
    
    progress = Math.min(progress, 99);
    
    const progressBar = document.getElementById('processing-progress');
    if (progressBar) {
      progressBar.style.width = progress + '%';
    }
    
    // Update status message
    this.updateStatusMessage();
  }
  
  updateStatusMessage() {
    const statusElement = document.querySelector('#video-processing small');
    if (!statusElement) return;
    
    if (this.checkCount <= 2) {
      statusElement.innerHTML = '<i class="fas fa-upload me-1"></i>Processing video for streaming...';
    } else if (this.checkCount <= 5) {
      statusElement.innerHTML = '<i class="fas fa-cog me-1"></i>Optimizing video quality...';
    } else {
      statusElement.innerHTML = '<i class="fas fa-check me-1"></i>Almost ready for playback...';
    }
  }
  
  scheduleNextCheck() {
    if (this.checkCount >= this.maxChecks || this.destroyed) {
      console.log('Max checks reached, showing video anyway');
      this.showVideoWithWarning();
      return;
    }
    
    // Faster initial checks, then slower
    let delay;
    if (this.checkCount <= 3) {
      delay = 3000; // 3 seconds initially
    } else if (this.checkCount <= 10) {
      delay = 5000; // 5 seconds
    } else {
      delay = 8000; // 8 seconds for later checks
    }
    
    console.log(`Scheduling next check in ${delay/1000} seconds...`);
    setTimeout(() => {
      if (!this.destroyed) {
        this.checkVideoStatus();
      }
    }, delay);
  }
  
  showVideo() {
    if (this.isVideoReady) return;
    
    this.isVideoReady = true;
    console.log('Showing video player...');
    
    // Complete progress
    const progressBar = document.getElementById('processing-progress');
    if (progressBar) {
      progressBar.style.width = '100%';
    }
    
    // Show success message briefly, then show player
    const processingDiv = document.getElementById('video-processing');
    if (processingDiv) {
      processingDiv.innerHTML = `
        <div class="alert alert-success">
          <h6><i class="fas fa-check-circle me-2"></i>Video Ready!</h6>
          <p class="mb-0">Your video is ready for viewing.</p>
        </div>
      `;
      
      // Show video player after brief success message
      setTimeout(() => {
        processingDiv.style.display = 'none';
        const playerDiv = document.getElementById('video-player');
        if (playerDiv) {
          playerDiv.style.display = 'block';
        }
      }, 2000);
    }
  }
  
  showVideoWithWarning() {
    if (this.isVideoReady) return;
    
    this.isVideoReady = true;
    console.log('Showing video with info message...');
    
    const processingDiv = document.getElementById('video-processing');
    if (processingDiv) {
      processingDiv.innerHTML = `
        <div class="alert alert-info">
          <h6><i class="fas fa-info-circle me-2"></i>Video Processing Complete</h6>
          <p class="mb-0">Your video should be ready for viewing. If it doesn't load immediately, please wait a moment.</p>
        </div>
      `;
      
      setTimeout(() => {
        const playerDiv = document.getElementById('video-player');
        if (playerDiv) {
          playerDiv.style.display = 'block';
        }
      }, 1500);
    }
  }
}

// Initialize video monitoring when page loads
document.addEventListener('DOMContentLoaded', function() {
  const videoUid = '{{video_url}}';
  console.log('Initializing video monitor for:', videoUid);
  
  // Create and start monitor
  const monitor = new VideoMonitor(videoUid);
  monitor.start();
  
  // Cleanup on page unload
  window.addEventListener('beforeunload', function() {
    monitor.destroy();
  });
});
</script>
{{/if}}
