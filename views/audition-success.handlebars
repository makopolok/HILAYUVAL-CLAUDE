{{! views/audition-success.handlebars }}
{{> header}}
<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-lg-8">
      <!-- Success Animation -->
      <div class="text-center mb-4">
        <div class="success-checkmark">
          <div class="check-icon">
            <span class="icon-line line-tip"></span>
            <span class="icon-line line-long"></span>
            <div class="icon-circle"></div>
            <div class="icon-fix"></div>
          </div>
        </div>        <h1 class="display-5 mt-4 mb-3" style="color: var(--primary-red);">Audition Submitted Successfully!</h1>
        <p class="lead text-muted">Thank you {{actor_name}} for your submission</p>
      </div>

      <!-- Submission Details Card -->
      <div class="card shadow-sm mb-4" style="border-color: var(--primary-red);">
        <div class="card-header text-white" style="background-color: var(--primary-red);">
          <h5 class="mb-0">
            <i class="fas fa-check-circle me-2"></i>
            Submission Details
          </h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6 mb-3">
              <h6 class="text-muted mb-1">Project</h6>
              <p class="mb-0 fw-semibold">{{project.name}}</p>
            </div>
            <div class="col-md-6 mb-3">
              <h6 class="text-muted mb-1">Role</h6>
              <p class="mb-0 fw-semibold">{{role}}</p>
            </div>
            <div class="col-md-6 mb-3">
              <h6 class="text-muted mb-1">Actor</h6>
              <p class="mb-0">{{actor_name}}</p>
            </div>
            <div class="col-md-6 mb-3">
              <h6 class="text-muted mb-1">Email</h6>
              <p class="mb-0">{{email}}</p>
            </div>
            {{#if phone}}
            <div class="col-md-6 mb-3">
              <h6 class="text-muted mb-1">Phone</h6>
              <p class="mb-0">{{phone}}</p>
            </div>
            {{/if}}
            <div class="col-md-6 mb-3">
              <h6 class="text-muted mb-1">Submitted</h6>
              <p class="mb-0">{{submitted_time}}</p>
            </div>
          </div>
        </div>
      </div>      <!-- Media Uploads -->
      {{#if video_url}}
      <div class="card shadow-sm mb-4" style="border-color: var(--primary-red);">
        <div class="card-header text-white" style="background-color: var(--primary-red);">
          <h5 class="mb-0">
            <i class="fas fa-video me-2"></i>
            Your Video Submission
          </h5>
        </div>        <div class="card-body">
          {{#if (eq video_type "cloudflare_stream")}}
            <div id="video-container">              <!-- Processing indicator -->
              <div id="video-processing" class="text-center p-5" style="display: block;">
                <!-- Large red spinner -->
                <div class="d-flex justify-content-center mb-4">
                  <div class="spinner-border" role="status" style="color: var(--primary-red); width: 4rem; height: 4rem; border-width: 0.3em;">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                </div>
                  <!-- Processing message -->
                <h5 class="mb-3" style="color: var(--primary-red);">
                  <i class="fas fa-cog fa-spin me-2"></i>
                  Processing Your Video...
                </h5>
                <p class="text-muted mb-4">Your video has been successfully uploaded and is being optimized for playback. This usually takes 30 seconds to 2 minutes.</p>
                
                <!-- Progress bar -->
                <div class="progress mb-3" style="height: 8px;">
                  <div class="progress-bar" role="progressbar" style="background-color: var(--primary-red); width: 0%" id="processing-progress"></div>
                </div>
                
                <!-- Status text -->
                <small class="text-muted">
                  <i class="fas fa-shield-alt me-1"></i>
                  Checking video readiness...
                </small>
              </div>
              
              <!-- Video player (hidden initially) -->
              <div id="video-player" style="display: none;">
                <div class="ratio ratio-16x9 mb-3">
                  <iframe 
                    src="https://iframe.videodelivery.net/{{video_url}}" 
                    frameborder="0" 
                    allowfullscreen
                    allow="accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;"
                    class="rounded w-100 h-100">
                  </iframe>
                </div>
              </div>
            </div>
            <div class="alert alert-info">
              <i class="fas fa-shield-alt me-2"></i>
              <strong>Secure Upload:</strong> Your video is privately hosted and only accessible to casting directors.
            </div>
          {{else if (eq video_type "youtube")}}
            <div class="ratio ratio-16x9 mb-3">
              <iframe 
                src="https://www.youtube.com/embed/{{video_url}}" 
                frameborder="0" 
                allowfullscreen
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                class="rounded w-100 h-100">
              </iframe>
            </div>
            <div class="d-flex align-items-center">
              <i class="fab fa-youtube text-danger me-2"></i>
              <a href="{{video_url}}" target="_blank" class="btn btn-outline-danger btn-sm">
                View on YouTube
              </a>
            </div>
          {{/if}}
        </div>
      </div>
      {{/if}}      {{#if profile_pictures.length}}
      <div class="card shadow-sm mb-4" style="border-color: var(--primary-red);">
        <div class="card-header text-white" style="background-color: var(--primary-red);">
          <h5 class="mb-0">
            <i class="fas fa-images me-2"></i>
            Profile Pictures
          </h5>
        </div>
        <div class="card-body">
          <div class="row g-3">
            {{#each profile_pictures}}
            <div class="col-md-4">
              <div class="card border-0 shadow-sm">
                <img src="{{this.url}}" class="card-img-top rounded" alt="Profile picture" style="height: 200px; object-fit: cover;">
              </div>
            </div>
            {{/each}}
          </div>
        </div>
      </div>
      {{/if}}      {{#if showreel_url}}
      <div class="card shadow-sm mb-4" style="border-color: var(--primary-red);">
        <div class="card-header text-white" style="background-color: var(--primary-red);">
          <h5 class="mb-0">
            <i class="fas fa-film me-2"></i>
            Showreel
          </h5>
        </div>
        <div class="card-body">
          <a href="{{showreel_url}}" target="_blank" class="btn" style="background-color: var(--primary-red); border-color: var(--primary-red); color: white;">
            <i class="fas fa-external-link-alt me-2"></i>
            View Showreel
          </a>
        </div>
      </div>
      {{/if}}

      <!-- Next Steps -->
      <div class="card border-secondary shadow-sm mb-4">
        <div class="card-header bg-secondary text-white">
          <h5 class="mb-0">
            <i class="fas fa-clock me-2"></i>
            What Happens Next?
          </h5>
        </div>
        <div class="card-body">
          <div class="row">            <div class="col-md-4 text-center mb-3">
              <div class="bg-light rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                <i class="fas fa-eye" style="color: var(--primary-red);" class="fs-4"></i>
              </div>
              <h6 class="mt-2">Review</h6>
              <p class="small text-muted">Casting directors will review your submission</p>
            </div>            <div class="col-md-4 text-center mb-3">
              <div class="bg-light rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                <i class="fas fa-phone fs-4" style="color: var(--primary-red);"></i>
              </div>
              <h6 class="mt-2">Contact</h6>
              <p class="small text-muted">If selected, we'll contact you directly</p>
            </div>
            <div class="col-md-4 text-center mb-3">
              <div class="bg-light rounded-circle d-inline-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                <i class="fas fa-star" style="color: var(--primary-red);" class="fs-4"></i>
              </div>
              <h6 class="mt-2">Audition</h6>
              <p class="small text-muted">Further auditions may be scheduled</p>
            </div>
          </div>
        </div>
      </div>      <!-- Action Buttons -->
      <div class="text-center mb-5">
        <a href="/audition/{{project.id}}" class="btn me-3" style="background-color: var(--primary-red); border-color: var(--primary-red); color: white;">
          <i class="fas fa-plus me-2"></i>
          Submit Another Audition
        </a>
        <a href="/projects" class="btn btn-outline-secondary">
          <i class="fas fa-list me-2"></i>
          View All Projects
        </a>
      </div>

      <!-- Contact Information -->
      <div class="text-center text-muted">
        <p>
          <i class="fas fa-envelope me-2"></i>
          Questions? Contact us at 
          <a href="mailto:casting@hilayuval.com">casting@hilayuval.com</a>
        </p>
      </div>
    </div>
  </div>
</div>

<!-- Custom CSS for success animation -->
<style>
/* Card border fixes */
.card {
  border-radius: 0.375rem !important;
  overflow: hidden;
}

.card-header {
  border-bottom: 1px solid rgba(0,0,0,.125);
  border-top-left-radius: calc(0.375rem - 1px) !important;
  border-top-right-radius: calc(0.375rem - 1px) !important;
}

.card-body {
  border-bottom-left-radius: calc(0.375rem - 1px) !important;
  border-bottom-right-radius: calc(0.375rem - 1px) !important;
}

.success-checkmark {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  display: block;
  stroke-width: 3;
  stroke: var(--primary-red);
  stroke-miterlimit: 10;
  margin: 10px auto;
  box-shadow: inset 0px 0px 0px var(--primary-red);
  animation: fill .4s ease-in-out .4s forwards, scale .3s ease-in-out .9s both;
  position: relative;
}

.success-checkmark .check-icon {
  width: 56px;
  height: 56px;
  position: absolute;
  left: 12px;
  top: 12px;
  border-radius: 50%;
  border: 3px solid var(--primary-red);
  background: var(--primary-red);
}

.success-checkmark .check-icon::before {
  content: '';
  width: 100%;
  height: 100%;
  background: var(--primary-red);
  border-radius: 50%;
  position: absolute;
  left: 0;
  top: 0;
  animation: pulse 2s ease-in-out infinite;
}

.success-checkmark .icon-line {
  height: 3px;
  background: white;
  display: block;
  border-radius: 2px;
  position: absolute;
  z-index: 10;
}

.success-checkmark .icon-line.line-tip {
  top: 26px;
  left: 14px;
  width: 15px;
  transform: rotate(45deg);
  animation: icon-line-tip 0.75s;
}

.success-checkmark .icon-line.line-long {
  top: 31px;
  right: 8px;
  width: 30px;
  transform: rotate(-45deg);
  animation: icon-line-long 0.75s;
}

@keyframes pulse {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  50% {
    transform: scale(1.1);
    opacity: 0.8;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes icon-line-tip {
  0% {
    width: 0;
    left: 1px;
    top: 19px;
  }
  54% {
    width: 0;
    left: 1px;
    top: 19px;
  }
  70% {
    width: 15px;
    left: -8px;
    top: 37px;
  }
  84% {
    width: 17px;
    left: 21px;
    top: 48px;
  }
  100% {
    width: 15px;
    left: 14px;
    top: 26px;
  }
}

@keyframes icon-line-long {
  0% {
    width: 0;
    right: 46px;
    top: 54px;
  }
  65% {
    width: 0;
    right: 46px;
    top: 54px;
  }
  84% {
    width: 30px;
    right: 0px;
    top: 17px;
  }
  100% {
    width: 30px;
    right: 8px;
    top: 31px;
  }
}

@keyframes fill {
  100% {
    box-shadow: inset 0px 0px 0px 30px var(--primary-red);
  }
}

@keyframes scale {
  0%, 100% {
    transform: none;
  }
  50% {
    transform: scale3d(1.1, 1.1, 1);
  }
}
</style>

{{> footer}}

<!-- Cloudflare Stream Video Status Checker -->
{{#if (eq video_type "cloudflare_stream")}}
<script>
let checkCount = 0;
const maxChecks = 60; // Check for up to 10 minutes (more time for large videos)
const videoUid = '{{video_url}}';
let isVideoReady = false;

function checkVideoStatus() {
  if (isVideoReady) return; // Prevent multiple calls after video is ready
  
  checkCount++;
  console.log(`Video status check #${checkCount} for ${videoUid}`);
  
  // Update status message based on progress
  const statusElement = document.querySelector('#video-processing small');
  if (checkCount <= 3) {
    statusElement.innerHTML = '<i class="fas fa-upload me-1"></i>Video uploaded successfully, starting processing...';
  } else if (checkCount <= 8) {
    statusElement.innerHTML = '<i class="fas fa-cog me-1"></i>Analyzing and optimizing video quality...';
  } else if (checkCount <= 20) {
    statusElement.innerHTML = '<i class="fas fa-film me-1"></i>Encoding video for streaming...';
  } else if (checkCount <= 35) {
    statusElement.innerHTML = '<i class="fas fa-server me-1"></i>Preparing video for delivery...';
  } else {
    statusElement.innerHTML = '<i class="fas fa-clock me-1"></i>Final processing steps...';
  }
  
  // Update progress bar with more realistic timing
  let progress;
  if (checkCount <= 5) {
    progress = checkCount * 10; // 0-50% in first 5 checks (25 seconds)
  } else if (checkCount <= 15) {
    progress = 50 + (checkCount - 5) * 3; // 50-80% next 10 checks
  } else if (checkCount <= 30) {
    progress = 80 + (checkCount - 15) * 1; // 80-95% next 15 checks
  } else {
    progress = 95 + Math.min((checkCount - 30) * 0.2, 4); // Very slow to 99%
  }
  progress = Math.min(progress, 99);
  document.getElementById('processing-progress').style.width = progress + '%';
  
  // Try API call first (more reliable for status)
  checkVideoStatusAPI().then(apiReady => {
    if (apiReady) {
      console.log('API confirmed video is ready');
      // Double-check with iframe before showing
      performFinalValidation();
    } else {
      console.log('API says video not ready, continuing checks...');
      scheduleNextCheck();
    }
  }).catch(error => {
    console.warn('API status check failed, using iframe method:', error);
    // Fallback to iframe testing only
    checkVideoStatusIframe();
  });
}

function checkVideoStatusAPI() {
  return fetch(`/api/video-status/${videoUid}`)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('API response:', data);
      if (data.success && data.readyToStream) {
        return true;
      }
      return false;
    })
    .catch(error => {
      console.warn('API video status check failed:', error);
      return false;
    });
}

function performFinalValidation() {
  console.log('Performing final validation before showing video...');
  
  // Try multiple validation methods for maximum reliability
  let validationPassed = 0;
  let validationFailed = 0;
  const totalValidations = 2; // We'll run 2 different tests
  
  function checkValidationComplete() {
    if (validationPassed > 0) {
      // At least one validation passed - show video
      console.log('Final validation successful - showing video');
      videoReady();
    } else if (validationPassed + validationFailed >= totalValidations) {
      // All validations completed but none passed - still show video with delay
      console.log('Final validation uncertain - showing video with warning');
      setTimeout(() => {
        videoReady();
      }, 3000);
    }
  }
  
  // Validation 1: Test iframe with preload
  const testIframe1 = document.createElement('iframe');
  testIframe1.style.display = 'none';
  testIframe1.style.position = 'absolute';
  testIframe1.style.left = '-9999px';
  testIframe1.style.width = '1px';
  testIframe1.style.height = '1px';
  testIframe1.src = `https://iframe.videodelivery.net/${videoUid}?preload=true&autoplay=false`;
  
  let iframe1Timeout = setTimeout(() => {
    console.log('Iframe validation 1 timeout');
    cleanupTestIframe(testIframe1);
    validationFailed++;
    checkValidationComplete();
  }, 10000);
  
  testIframe1.onload = function() {
    console.log('Iframe validation 1 successful');
    clearTimeout(iframe1Timeout);
    cleanupTestIframe(testIframe1);
    validationPassed++;
    checkValidationComplete();
  };
  
  testIframe1.onerror = function() {
    console.log('Iframe validation 1 failed');
    clearTimeout(iframe1Timeout);
    cleanupTestIframe(testIframe1);
    validationFailed++;
    checkValidationComplete();
  };
  
  document.body.appendChild(testIframe1);
  
  // Validation 2: Test with different iframe approach after delay
  setTimeout(() => {
    const testIframe2 = document.createElement('iframe');
    testIframe2.style.display = 'none';
    testIframe2.style.position = 'absolute';
    testIframe2.style.left = '-9999px';
    testIframe2.style.width = '1px';
    testIframe2.style.height = '1px';
    testIframe2.src = `https://iframe.videodelivery.net/${videoUid}`;
    
    let iframe2Timeout = setTimeout(() => {
      console.log('Iframe validation 2 timeout');
      cleanupTestIframe(testIframe2);
      validationFailed++;
      checkValidationComplete();
    }, 8000);
    
    testIframe2.onload = function() {
      console.log('Iframe validation 2 successful');
      clearTimeout(iframe2Timeout);
      cleanupTestIframe(testIframe2);
      validationPassed++;
      checkValidationComplete();
    };
    
    testIframe2.onerror = function() {
      console.log('Iframe validation 2 failed');
      clearTimeout(iframe2Timeout);
      cleanupTestIframe(testIframe2);
      validationFailed++;
      checkValidationComplete();
    };
    
    document.body.appendChild(testIframe2);
  }, 2000); // Start second validation after 2 seconds
}

function checkVideoStatusIframe() {
  // Fallback iframe testing method
  const testIframe = document.createElement('iframe');
  testIframe.style.display = 'none';
  testIframe.style.position = 'absolute';
  testIframe.style.left = '-9999px';
  testIframe.style.width = '1px';
  testIframe.style.height = '1px';
  testIframe.src = `https://iframe.videodelivery.net/${videoUid}?preload=true`;
  
  let loadTimeout = setTimeout(() => {
    console.log('Iframe test timeout - video not ready yet');
    cleanupTestIframe(testIframe);
    scheduleNextCheck();
  }, 12000); // Longer timeout for iframe testing
  
  testIframe.onload = function() {
    console.log('Iframe test successful - video appears ready');
    clearTimeout(loadTimeout);
    cleanupTestIframe(testIframe);
    
    // Add delay before showing to ensure stability
    setTimeout(() => {
      videoReady();
    }, 3000);
  };
  
  testIframe.onerror = function() {
    console.log('Iframe test failed - video not ready');
    clearTimeout(loadTimeout);
    cleanupTestIframe(testIframe);
    scheduleNextCheck();
  };
  
  document.body.appendChild(testIframe);
}

function cleanupTestIframe(iframe) {
  try {
    if (iframe && iframe.parentNode) {
      iframe.parentNode.removeChild(iframe);
    }
  } catch(e) {
    console.warn('Error removing test iframe:', e);
  }
}

function scheduleNextCheck() {
  if (checkCount < maxChecks && !isVideoReady) {
    // More conservative intervals - wait longer between checks
    let nextCheckDelay;
    if (checkCount <= 3) {
      nextCheckDelay = 5000; // 5 seconds for first few checks
    } else if (checkCount <= 10) {
      nextCheckDelay = 8000; // 8 seconds
    } else if (checkCount <= 25) {
      nextCheckDelay = 12000; // 12 seconds
    } else {
      nextCheckDelay = 15000; // 15 seconds for later checks
    }
    
    console.log(`Scheduling next check in ${nextCheckDelay/1000} seconds...`);
    setTimeout(checkVideoStatus, nextCheckDelay);
  } else {
    // Max checks reached or video is ready
    if (!isVideoReady) {
      console.log('Max checks reached, showing video anyway');
      showVideoWithWarning();
    }
  }
}

function showVideoWithWarning() {
  document.getElementById('video-processing').innerHTML = `
    <div class="alert alert-info">
      <h6><i class="fas fa-info-circle me-2"></i>Video Processing Complete</h6>
      <p class="mb-2">Your video upload was successful and should be ready for viewing.</p>
      <p class="mb-0 small">If the video doesn't play immediately, please wait a moment and try refreshing the page.</p>
    </div>
  `;
  setTimeout(() => {
    document.getElementById('video-player').style.display = 'block';
  }, 1000);
}

function videoReady() {
  if (isVideoReady) return; // Prevent multiple calls
  
  isVideoReady = true;
  console.log('Video is ready! Showing player...');
  
  // Complete the progress bar
  document.getElementById('processing-progress').style.width = '100%';
  
  // Show success message briefly
  document.getElementById('video-processing').innerHTML = `
    <div class="alert alert-success">
      <h6><i class="fas fa-check-circle me-2"></i>Video Ready!</h6>
      <p class="mb-0">Your video has been processed and is ready for viewing.</p>
    </div>
  `;
  
  // After showing success, display the video player
  setTimeout(() => {
    document.getElementById('video-processing').style.display = 'none';
    document.getElementById('video-player').style.display = 'block';
  }, 2000);
}

// Start checking after page loads
document.addEventListener('DOMContentLoaded', function() {
  console.log('Starting video processing monitoring for:', videoUid);
  // Wait a bit longer before first check to allow initial processing
  setTimeout(checkVideoStatus, 3000);
});
</script>
{{/if}}
