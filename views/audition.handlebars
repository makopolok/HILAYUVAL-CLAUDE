{{! views/audition.handlebars }}
{{!-- audition.handlebars: Project-specific or generic audition submission form --}}
{{> header}}
<div class="container mt-5">
  <h1 class="display-4 mb-4">
    {{!-- Show project name if present, otherwise generic heading --}}
    {{#if project}}
      Submit Audition for <span class="text-primary">{{project.name}}</span>
    {{else}}
      Submit Your Audition
    {{/if}}
  </h1>
  {{!-- Form action is dynamic: /audition/:p      // Create a container for the manual submission button
      const manualSubmitContainer = document.createElement('div');
      manualSubmitContainer.id = 'manual-submit-container';
      manualSubmitContainer.className = 'd-none alert alert-success mt-3';
      manualSubmitContainer.innerHTML = `
        <p><strong>Video upload complete!</strong> Your video is ready for submission.</p>
        <button id="manual-submit-btn" type="button" class="btn btn-success">
          <i class="fas fa-check-circle me-2"></i>Continue with Submission
        </button>
      `;
      
      // Add it after the direct upload UI
      document.getElementById('direct-upload-ui').parentNode.appendChild(manualSubmitContainer);
      
      // Add click handler to manual submit button
      document.getElementById('manual-submit-btn').addEventListener('click', function() {
        console.log('Manual submit button clicked');
        document.getElementById('audition-form').submit();
      });
      
      // Update the loading overlay progress when upload progress changes
      uploader.options.onProgress = (percent) => {
        document.getElementById('overlay-upload-progress-bar').style.width = `${percent}%`;
        document.getElementById('overlay-upload-progress-text').textContent = `${percent}%`;
        document.getElementById('upload-progress-text').textContent = `${percent}%`;
        document.getElementById('upload-progress').value = percent;
        
        // Show the direct upload UI when upload starts
        if (percent > 0) {
          document.getElementById('direct-upload-ui').classList.remove('d-none');
        }
        
        // Show the manual submit button when upload completes
        if (percent === 100) {
          setTimeout(() => {
            document.getElementById('manual-submit-container').classList.remove('d-none');
          }, 5000); // Show after 5 seconds to give time for processing
        }
      }; project-specific, /audition for generic --}}
  <form id="audition-form" action="{{#if project}}/audition/{{project.id}}{{else}}/audition{{/if}}" method="POST" enctype="multipart/form-data" class="needs-validation" novalidate data-upload-method="{{upload_method}}" data-bunny-library-id="{{bunny_stream_library_id}}">
    <div class="row">
      <div class="col-md-6 mb-3">
        <label for="first_name_he" class="form-label">שם פרטי (First Name, Hebrew)</label>
        <input type="text" class="form-control" id="first_name_he" name="first_name_he" dir="rtl" required>
        <div class="invalid-feedback">נא להזין שם פרטי בעברית.</div>
      </div>
      <div class="col-md-6 mb-3">
        <label for="last_name_he" class="form-label">שם משפחה (Last Name, Hebrew)</label>
        <input type="text" class="form-control" id="last_name_he" name="last_name_he" dir="rtl" required>
        <div class="invalid-feedback">נא להזין שם משפחה בעברית.</div>
      </div>
    </div>
    <div class="row">
      <div class="col-md-6 mb-3">
        <label for="first_name_en" class="form-label">First Name (English)</label>
        <input type="text" class="form-control" id="first_name_en" name="first_name_en" required>
        <div class="invalid-feedback">Please enter your first name in English.</div>
      </div>
      <div class="col-md-6 mb-3">
        <label for="last_name_en" class="form-label">Last Name (English)</label>
        <input type="text" class="form-control" id="last_name_en" name="last_name_en" required>
        <div class="invalid-feedback">Please enter your last name in English.</div>
      </div>
    </div>
    <div class="mb-3">
      <label for="phone" class="form-label">Phone Number</label>
      <input type="tel" class="form-control" id="phone" name="phone" required>
      <div class="invalid-feedback">Please enter a valid phone number.</div>
    </div>
    <div class="mb-3">
      <label for="email" class="form-label">Email</label>
      <input type="email" class="form-control" id="email" name="email" required>
      <div class="invalid-feedback">Please enter a valid email address.</div>
    </div>
    <div class="mb-3">
      <label for="agency" class="form-label">Agency</label>
      <input type="text" class="form-control" id="agency" name="agency">
    </div>
    <div class="mb-3">
      <label for="age" class="form-label">Age (optional)</label>
      <input type="number" class="form-control" id="age" name="age" min="1" max="120">
    </div>
    <div class="mb-3">
      <label for="height" class="form-label">Height (cm, optional)</label>
      <input type="number" class="form-control" id="height" name="height" min="50" max="250">
    </div>
    {{#if project}}
    <div class="mb-3">
      <label for="role" class="form-label">Role</label>
      <select class="form-select" id="role" name="role" required>
        <option value="" selected disabled>Select a role</option>
        {{#each project.roles}}
          <option value="{{this.name}}">{{this.name}}</option>
        {{/each}}
      </select>
      <div class="invalid-feedback">Please select a role.</div>
    </div>
    {{else}}
    <div class="mb-3">
      <label for="role" class="form-label">Role (optional)</label>
      <input type="text" class="form-control" id="role" name="role">
    </div>
    {{/if}}    <div class="mb-3">
      <label for="profile_pictures" class="form-label">Profile Picture(s) <span class="text-muted">(optional)</span></label>
      <input type="file" class="form-control" id="profile_pictures" name="profile_pictures" accept="image/*" multiple>
      <div class="invalid-feedback">If you wish, you may upload a profile picture.</div>
      <div class="form-text text-muted">
        <i class="fas fa-info-circle me-1"></i>
        Maximum 10 files, 500MB each. Supported: JPG, PNG, WebP, GIF
      </div>
      <!-- Profile pictures preview -->
      <div id="profile-pictures-preview" class="mt-2 d-none">
        <div class="row g-2" id="profile-pictures-list"></div>
      </div>
    </div>    {{#if project}}
      {{#if (eq project.uploadMethod "youtube")}}
        <div class="mb-3">
          <label for="video" class="form-label">Self-Tape Video <span class="text-muted">(optional)</span> (YouTube Upload)</label>
          <input type="file" class="form-control" id="video" name="video" accept="video/*">
          <div class="invalid-feedback">If you wish, you may upload a video file.</div>
          <div class="form-text text-muted">
            <i class="fas fa-info-circle me-1"></i>
            Maximum 500MB. Supported: MP4, AVI, MOV, WMV, FLV, WebM, MKV
          </div>
          <!-- Video preview and validation -->
          <div id="video-preview" class="mt-2 d-none">
            <div class="card border-success">
              <div class="card-body p-3">
                <div class="d-flex align-items-center">
                  <div class="me-3">
                    <i class="fas fa-video text-success fa-2x"></i>
                  </div>
                  <div class="flex-grow-1">
                    <h6 class="mb-1" id="video-name"></h6>
                    <div class="small text-muted">
                      <span id="video-size"></span> • <span id="video-type"></span>
                    </div>
                    <div class="progress mt-2" style="height: 4px;" id="video-validation-progress">
                      <div class="progress-bar bg-success" role="progressbar" style="width: 100%"></div>
                    </div>
                  </div>
                  <button type="button" class="btn btn-sm btn-outline-danger" onclick="clearVideoSelection()">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
                <div class="mt-3 d-none" id="direct-upload-ui">
                  <div class="d-flex align-items-center mb-2">
                    <i class="fas fa-cloud-arrow-up me-2 text-success"></i>
                    <strong>Direct upload to Bunny.net</strong>
                  </div>
                  <progress id="upload-progress" max="100" value="0" style="width:100%;"></progress>
                  <div class="small text-muted mt-1">Progress: <span id="upload-progress-text">0%</span></div>
                  <div class="mt-2 d-flex gap-2">
                    <button type="button" id="btn-upload-pause" class="btn btn-sm btn-outline-secondary">Pause</button>
                    <button type="button" id="btn-upload-resume" class="btn btn-sm btn-outline-secondary" disabled>Resume</button>
                    <button type="button" id="btn-upload-cancel" class="btn btn-sm btn-outline-danger">Cancel</button>
                  </div>
                  <div id="upload-error" class="alert alert-danger d-none mt-2" role="alert"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      {{else}}
        <div class="mb-3">
          <label for="video" class="form-label">Self-Tape Video <span class="text-muted">(optional)</span> (Private Upload)</label>
          <input type="file" class="form-control" id="video" name="video" accept="video/*">
          <div class="invalid-feedback">If you wish, you may upload a video file.</div>
          <div class="form-text text-muted">
            <i class="fas fa-info-circle me-1"></i>
            Maximum 500MB. Supported: MP4, AVI, MOV, WMV, FLV, WebM, MKV
          </div>
          <!-- Video preview and validation -->
          <div id="video-preview" class="mt-2 d-none">
            <div class="card border-success">
              <div class="card-body p-3">
                <div class="d-flex align-items-center">
                  <div class="me-3">
                    <i class="fas fa-video text-success fa-2x"></i>
                  </div>
                  <div class="flex-grow-1">
                    <h6 class="mb-1" id="video-name"></h6>
                    <div class="small text-muted">
                      <span id="video-size"></span> • <span id="video-type"></span>
                    </div>
                    <div class="progress mt-2" style="height: 4px;" id="video-validation-progress">
                      <div class="progress-bar bg-success" role="progressbar" style="width: 100%"></div>
                    </div>
                  </div>
                  <button type="button" class="btn btn-sm btn-outline-danger" onclick="clearVideoSelection()">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
                <div class="mt-3 d-none" id="direct-upload-ui">
                  <div class="card border-light shadow-sm">
                    <div class="card-header bg-light d-flex align-items-center">
                      <i class="fas fa-cloud-upload-alt me-2 text-primary"></i>
                      <strong>Secure Video Upload</strong>
                      <span class="ms-auto badge bg-primary" id="inline-upload-status">Initializing...</span>
                    </div>
                    <div class="card-body">
                      <!-- Progress bar and percentage -->
                      <div class="d-flex align-items-center mb-2">
                        <div class="flex-grow-1 me-2">
                          <div class="progress" style="height: 8px;">
                            <div id="upload-progress-bar" class="progress-bar bg-primary progress-bar-striped progress-bar-animated" 
                                role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                          </div>
                        </div>
                        <span class="badge bg-light text-dark" id="upload-progress-text">0%</span>
                      </div>
                      
                      <!-- Hidden progress element for internal tracking -->
                      <progress id="upload-progress" max="100" value="0" style="display: none;"></progress>
                      
                      <!-- Upload status messages -->
                      <div id="upload-status" class="mt-3">
                        <div id="upload-status-uploading" class="d-flex align-items-center">
                          <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
                            <span class="visually-hidden">Loading...</span>
                          </div>
                          <span class="small">Uploading to secure server...</span>
                        </div>
                        
                        <div id="upload-status-processing" class="d-none d-flex align-items-center">
                          <div class="spinner-border spinner-border-sm text-warning me-2" role="status">
                            <span class="visually-hidden">Processing...</span>
                          </div>
                          <span class="small">Processing video (this may take a moment)...</span>
                        </div>
                        
                        <div id="upload-status-complete" class="d-none mt-2">
                          <div class="d-flex align-items-center text-success mb-2">
                            <i class="fas fa-check-circle me-2"></i>
                            <span class="fw-bold">Video Ready!</span>
                          </div>
                          <div class="d-flex justify-content-end mt-2">
                            <button id="continue-submit-btn" type="button" class="btn btn-success btn-sm">
                              <i class="fas fa-check-circle me-1"></i>Submit Audition
                            </button>
                          </div>
                        </div>
                        
                        <div id="upload-status-error" class="d-none alert alert-danger mt-2 mb-0 py-2 px-3">
                          <div class="d-flex align-items-center">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <span class="small">Error processing video.</span>
                          </div>
                        </div>
                      </div>
                      
                      <!-- Security information -->
                      <div class="mt-3 d-flex align-items-center">
                        <div class="d-flex align-items-center justify-content-between mb-1">
                    <div class="small text-muted">
                      <i class="fas fa-shield-alt me-1"></i>
                      Secure upload with encryption
                    </div>
                    <div class="small text-muted">
                      <span id="upload-stats-speed">-</span>
                    </div>
                  </div>
                  <div class="small text-muted d-flex justify-content-between">
                    <span>Using chunked upload for reliability</span>
                    <span id="upload-stats-eta"></span>
                  </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      {{/if}}    {{else}}
    <div class="mb-3">
      <label for="video" class="form-label">Self-Tape Video <span class="text-muted">(optional)</span></label>
      <input type="file" class="form-control" id="video" name="video" accept="video/*">
      <div class="invalid-feedback">If you wish, you may upload a video file.</div>
      <div class="form-text text-muted">
        <i class="fas fa-info-circle me-1"></i>
        Maximum 500MB. Supported: MP4, AVI, MOV, WMV, FLV, WebM, MKV
      </div>
      <!-- Video preview and validation -->
      <div id="video-preview" class="mt-2 d-none">
        <div class="card border-success">
          <div class="card-body p-3">
            <div class="d-flex align-items-center">
              <div class="me-3">
                <i class="fas fa-video text-success fa-2x"></i>
              </div>
              <div class="flex-grow-1">
                <h6 class="mb-1" id="video-name"></h6>
                <div class="small text-muted">
                  <span id="video-size"></span> • <span id="video-type"></span>
                </div>
                <div class="progress mt-2" style="height: 4px;" id="video-validation-progress">
                  <div class="progress-bar bg-success" role="progressbar" style="width: 100%"></div>
                </div>
              </div>
              <button type="button" class="btn btn-sm btn-outline-danger" onclick="clearVideoSelection()">
                <i class="fas fa-times"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    {{/if}}
    <div class="mb-3">
      <label for="showreel_url" class="form-label">Showreel Link (optional)</label>
      <input type="url" class="form-control" id="showreel_url" name="showreel_url" placeholder="https://...">
    </div>    <button type="submit" class="btn btn-primary" id="submit-btn">
      <span id="submit-text">Submit Audition</span>
      <span id="submit-spinner" class="d-none">
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        Uploading...
      </span>
    </button>
  </form>
</div>

<!-- Loading Overlay -->
<div id="loading-overlay" class="d-none position-fixed top-0 start-0 w-100 h-100" style="background-color: rgba(0,0,0,0.85); z-index: 9999;">
  <div class="d-flex justify-content-center align-items-center h-100">
    <div class="text-center text-white" style="max-width: 500px;">
      <!-- Upload Status Indicator -->
      <div id="overlay-status-indicator" class="mb-3">
        <!-- Upload Phase -->
        <div id="upload-phase" class="d-flex justify-content-center align-items-center mb-2">
          <div class="spinner-border me-3" role="status" style="color: var(--primary-red); width: 3.5rem; height: 3.5rem; border-width: 0.3em;">
            <span class="visually-hidden">Loading...</span>
          </div>
          <div class="text-start">
            <h4 class="mb-0" style="color: var(--primary-red);">
              <i class="fas fa-cloud-upload-alt me-2"></i>
              <span id="overlay-status-title">Uploading Video...</span>
            </h4>
            <p class="text-light mb-0 small" id="overlay-status-subtitle">Please wait while your video is being processed.</p>
          </div>
        </div>
        
        <!-- Processing Phase (initially hidden) -->
        <div id="processing-phase" class="d-none text-center">
          <i class="fas fa-cogs fa-3x mb-2" style="color: var(--primary-red);"></i>
          <h4 style="color: var(--primary-red);">Processing Video...</h4>
          <p class="text-light small">Your video has been uploaded and is now being processed. This will only take a moment.</p>
        </div>
        
        <!-- Complete Phase (initially hidden) -->
        <div id="complete-phase" class="d-none text-center">
          <i class="fas fa-check-circle fa-3x mb-2" style="color: #28a745;"></i>
          <h4 style="color: #28a745;">Upload Complete!</h4>
          <p class="text-light small">Your video has been successfully uploaded and processed.</p>
        </div>
      </div>
      
      <!-- Main Message -->
      <p class="text-light">Please don't close this tab. Your video is being securely uploaded and processed.</p>
      
      <!-- Enhanced progress information -->
      <div class="mt-4">
        <div class="card bg-dark border-secondary" style="max-width: 400px; margin: 0 auto;">
          <div class="card-body p-3">
            <h6 class="text-white mb-3">
              <i class="fas fa-shield-alt me-2" style="color: var(--primary-red);"></i>
              Secure Video Upload
            </h6>
            <div class="text-start">
              <div class="d-flex justify-content-between mb-2">
                <span class="small text-muted">Status:</span>
                <span class="small text-white" id="overlay-detailed-status">Uploading...</span>
              </div>
              <div class="d-flex justify-content-between mb-2">
                <span class="small text-muted">Security:</span>
                <span class="small text-white">End-to-End Encrypted</span>
              </div>
              <div class="d-flex justify-content-between">
                <span class="small text-muted">Accessibility:</span>
                <span class="small text-white">Casting Directors Only</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Progress Bar -->
      <div class="progress mx-auto mt-3" style="width: 300px; height: 10px; background-color: rgba(255,255,255,0.1);">
        <div class="progress-bar progress-bar-striped progress-bar-animated" id="overlay-upload-progress-bar" role="progressbar" style="background-color: var(--primary-red); width: 0%"></div>
      </div>
      <div class="text-center mt-2">
        <span class="text-light fw-bold" style="letter-spacing:0.3px">Progress: <span id="overlay-upload-progress-text">0%</span></span>
      </div>
      
      <!-- Action Buttons -->
      <div class="mt-4" id="overlay-action-buttons">
        <!-- Initially empty - buttons will be added dynamically -->
      </div>
      
      <!-- Tips for large uploads -->
      <div class="mt-3">
        <small class="text-muted">
          <i class="fas fa-lightbulb me-1"></i>
          Tip: For best results, ensure stable internet connection during upload
        </small>
      </div>
    </div>
  </div>
</div>

{{> footer}}

<!-- Make sure axios is available for the secure uploader -->
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<!-- Load the secure uploader script -->
<script src="/js/secure-upload.js"></script>

<script>
// File size constants (matching backend limits)
const MAX_FILE_SIZE = 500 * 1024 * 1024; // 500MB
const MAX_PROFILE_PICTURES = 10;

// Supported file types
const VIDEO_TYPES = [
  'video/mp4', 'video/avi', 'video/mov', 'video/wmv', 
  'video/flv', 'video/webm', 'video/mkv', 'video/quicktime'
];
const IMAGE_TYPES = [
  'image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/jpg'
];

// Utility functions
function formatFileSize(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function validateFileSize(file) {
  return file.size <= MAX_FILE_SIZE;
}

function validateVideoType(file) {
  return VIDEO_TYPES.includes(file.type);
}

function validateImageType(file) {
  return IMAGE_TYPES.includes(file.type);
}

// Profile pictures handling
// Set upload start time when file is selected
function handleVideoSelection(event) {
  if (event.target.files && event.target.files.length > 0) {
    window.uploadStartTime = Date.now();
    console.log('Video selected, recording start time for speed calculations');
  }
}

function handleProfilePicturesSelection(event) {
  const files = Array.from(event.target.files);
  const preview = document.getElementById('profile-pictures-preview');
  const list = document.getElementById('profile-pictures-list');
  
  if (!files.length) {
    preview.classList.add('d-none');
    return;
  }

  // Validate file count
  if (files.length > MAX_PROFILE_PICTURES) {
    showFileError('profile_pictures', `Too many files selected. Maximum ${MAX_PROFILE_PICTURES} profile pictures allowed.`);
    event.target.value = '';
    preview.classList.add('d-none');
    return;
  }

  // Validate each file
  let hasErrors = false;
  const validFiles = [];

  files.forEach((file, index) => {
    if (!validateImageType(file)) {
      showFileError('profile_pictures', `File "${file.name}" is not a valid image type.`);
      hasErrors = true;
      return;
    }

    if (!validateFileSize(file)) {
      showFileError('profile_pictures', `File "${file.name}" is too large (${formatFileSize(file.size)}). Maximum size is 500MB.`);
      hasErrors = true;
      return;
    }

    validFiles.push(file);
  });

  if (hasErrors) {
    event.target.value = '';
    preview.classList.add('d-none');
    return;
  }

  // Show preview
  list.innerHTML = '';
  validFiles.forEach((file, index) => {
    const col = document.createElement('div');
    col.className = 'col-6 col-md-4 col-lg-3';
    
    col.innerHTML = `
      <div class="card border-success">
        <div class="card-body p-2">
          <div class="d-flex align-items-center">
            <i class="fas fa-image text-success me-2"></i>
            <div class="flex-grow-1">
              <div class="small fw-bold text-truncate">${file.name}</div>
              <div class="small text-muted">${formatFileSize(file.size)}</div>
            </div>
          </div>
        </div>
      </div>
    `;
    
    list.appendChild(col);
  });
  
  preview.classList.remove('d-none');
  clearFileError('profile_pictures');
}

// Error handling
function showFileError(fieldName, message) {
  const field = document.getElementById(fieldName);
  const existingError = field.parentNode.querySelector('.file-error');
  
  if (existingError) {
    existingError.remove();
  }
  
  const errorDiv = document.createElement('div');
  errorDiv.className = 'file-error alert alert-danger mt-2 p-2';
  errorDiv.innerHTML = `<i class="fas fa-exclamation-triangle me-1"></i> ${message}`;
  
  field.parentNode.appendChild(errorDiv);
  field.classList.add('is-invalid');
}

function clearFileError(fieldName) {
  const field = document.getElementById(fieldName);
  const existingError = field.parentNode.querySelector('.file-error');
  
  if (existingError) {
    existingError.remove();
  }
  
  field.classList.remove('is-invalid');
}

// Clear video selection
function clearVideoSelection() {
  document.getElementById('video').value = '';
  document.getElementById('video-preview').classList.add('d-none');
  document.getElementById('video_url').value = ''; // Clear the hidden input for video URL
  clearFileError('video');
  
  // Also hide any upload UI elements
  const directUploadUI = document.getElementById('direct-upload-ui');
  if (directUploadUI) {
    directUploadUI.classList.add('d-none');
  }
  
  // Reset progress indicators
  const progressBar = document.getElementById('upload-progress-bar');
  if (progressBar) {
    progressBar.style.width = '0%';
    progressBar.setAttribute('aria-valuenow', 0);
    progressBar.classList.add('progress-bar-striped', 'progress-bar-animated');
  }
  
  // Reset status messages
  document.getElementById('upload-status-uploading').classList.remove('d-none');
  document.getElementById('upload-status-processing').classList.add('d-none');
  document.getElementById('upload-status-complete').classList.add('d-none');
  document.getElementById('upload-status-error').classList.add('d-none');
}

// Initialize secure uploader
function initializeSecureUploader() {
  // Add a hidden input for the video URL
  const form = document.getElementById('audition-form');
  const videoUrlInput = document.createElement('input');
  videoUrlInput.type = 'hidden';
  videoUrlInput.id = 'video_url';
  videoUrlInput.name = 'video_url';
  form.appendChild(videoUrlInput);
  
  // Create the secure uploader instance with all options at once
  const uploader = initSecureUploader({
    fileInputId: 'video',
    progressElementId: 'upload-progress',
    statusElementId: 'upload-progress-text',
    videoIdInputId: 'video_url',
    formId: 'audition-form',
    submitButtonId: 'submit-btn',
    titlePrefix: 'Audition',
    
    // Define all callbacks in the initial options object
    onProgress: (percent) => {
      console.log('Upload progress update:', percent);
      
      // Update all progress indicators
      // Update progress bar
      const progressBar = document.getElementById('upload-progress-bar');
      if (progressBar) {
        progressBar.style.width = `${percent}%`;
        progressBar.setAttribute('aria-valuenow', percent);
      }
      
      // Update hidden native progress element (used for internal logic)
      const progressElement = document.getElementById('upload-progress');
      if (progressElement) {
        progressElement.value = percent;
      }
      
      // Update text indicators
      const progressText = document.getElementById('upload-progress-text');
      if (progressText) {
        progressText.textContent = `${percent}%`;
      }
      
      // Update statistics if we have the file information
      if (document.getElementById('video').files && document.getElementById('video').files[0]) {
        const fileSize = document.getElementById('video').files[0].size;
        const uploadedSize = Math.round((percent / 100) * fileSize);
        
        // Update speed and ETA displays if they exist
        const statsSpeed = document.getElementById('upload-stats-speed');
        const statsEta = document.getElementById('upload-stats-eta');
        
        if (percent > 0 && percent < 100) {
          // Calculate speed based on progress over time
          const elapsedMs = Date.now() - (window.uploadStartTime || Date.now());
          if (elapsedMs > 0) {
            const speedBps = uploadedSize / (elapsedMs / 1000);
            if (statsSpeed) statsSpeed.textContent = formatFileSize(speedBps) + '/s';
            
            // Calculate ETA
            const remainingBytes = fileSize - uploadedSize;
            if (speedBps > 0 && statsEta) {
              const etaSeconds = Math.round(remainingBytes / speedBps);
              if (etaSeconds < 60) {
                statsEta.textContent = `${etaSeconds} sec remaining`;
              } else if (etaSeconds < 3600) {
                statsEta.textContent = `${Math.floor(etaSeconds / 60)} min ${etaSeconds % 60} sec remaining`;
              } else {
                statsEta.textContent = `${Math.floor(etaSeconds / 3600)} hr ${Math.floor((etaSeconds % 3600) / 60)} min remaining`;
              }
            }
          }
        } else if (percent === 100) {
          if (statsSpeed) statsSpeed.textContent = 'Complete';
          if (statsEta) statsEta.textContent = '';
        }
      }
      
      // Update overlay progress and status
      const overlayBar = document.getElementById('overlay-upload-progress-bar');
      const overlayText = document.getElementById('overlay-upload-progress-text');
      const overlayDetailedStatus = document.getElementById('overlay-detailed-status');
      
      if (overlayBar) overlayBar.style.width = `${percent}%`;
      if (overlayText) overlayText.textContent = `${percent}%`;
      
      // Show loading overlay for uploads with improved UX
      const loadingOverlay = document.getElementById('loading-overlay');
      if (loadingOverlay) {
        if (percent > 0) {
          // Show overlay during active upload
          loadingOverlay.classList.remove('d-none');
          
          // Update detailed status based on progress
          if (overlayDetailedStatus) {
            if (percent < 100) {
              // For chunked uploads, show more detailed status
              const fileSize = document.getElementById('video').files[0].size;
              const uploadedSize = Math.round((percent / 100) * fileSize);
              
              // Format sizes
              const formattedTotal = formatFileSize(fileSize);
              const formattedUploaded = formatFileSize(uploadedSize);
              
              overlayDetailedStatus.innerHTML = `
                Uploading (${percent}%)<br>
                <small class="text-muted">${formattedUploaded} of ${formattedTotal}</small>
              `;
              
              // Update the subtitle with chunking info
              const statusSubtitle = document.getElementById('overlay-status-subtitle');
              if (statusSubtitle) {
                statusSubtitle.innerHTML = `Video uploads in chunks for better reliability. <small class="text-muted">Please don't close this tab.</small>`;
              }
            } else if (percent === 100) {
              overlayDetailedStatus.textContent = 'Processing...';
              
              // Show processing phase
              document.getElementById('upload-phase').classList.add('d-none');
              document.getElementById('processing-phase').classList.remove('d-none');
            }
          }
          
          // Add cancel button when upload is in progress
          if (percent < 100) {
            const actionButtons = document.getElementById('overlay-action-buttons');
            if (actionButtons && !document.getElementById('overlay-cancel-btn')) {
              actionButtons.innerHTML = `
                <button id="overlay-cancel-btn" class="btn btn-outline-light btn-sm">
                  <i class="fas fa-times-circle me-1"></i>Cancel Upload
                </button>
              `;
              
              // Add event listener to cancel button
              document.getElementById('overlay-cancel-btn').addEventListener('click', () => {
                if (confirm('Are you sure you want to cancel the upload?')) {
                  clearVideoSelection();
                  loadingOverlay.classList.add('d-none');
                  const submitButton = document.getElementById('submit-btn');
                  if (submitButton) submitButton.disabled = false;
                }
              });
            }
          } else if (percent === 100) {
            // Replace cancel button with "Continue with form" button
            const actionButtons = document.getElementById('overlay-action-buttons');
            if (actionButtons) {
              actionButtons.innerHTML = `
                <button id="overlay-continue-btn" class="btn btn-success">
                  <i class="fas fa-check-circle me-1"></i>Continue with Submission
                </button>
              `;
              
              // Add event listener to continue button
              document.getElementById('overlay-continue-btn').addEventListener('click', () => {
                loadingOverlay.classList.add('d-none');
              });
            }
          }
        }
      }
      
      // Show the direct upload UI when upload starts
      if (percent > 0) {
        document.getElementById('direct-upload-ui').classList.remove('d-none');
      }
      
      // Update button state
      const submitButton = document.getElementById('submit-btn');
      if (submitButton) {
        if (percent < 100) {
          // Disable during active upload
          submitButton.disabled = true;
        }
      }
    },
    
    // Handle upload completion
    onComplete: (videoData) => {
      console.log('Upload complete callback with video data:', videoData);
      
      // Store video ID for submission
      const videoIdInput = document.getElementById('video_url');
      if (videoIdInput && videoData.guid) {
        videoIdInput.value = videoData.guid;
        console.log('Video ID set to:', videoData.guid);
      }
      
      // Update loading overlay for completion
      const loadingOverlay = document.getElementById('loading-overlay');
      if (loadingOverlay) {
        // Show completed phase
        document.getElementById('upload-phase').classList.add('d-none');
        document.getElementById('processing-phase').classList.add('d-none');
        document.getElementById('complete-phase').classList.remove('d-none');
        
        // Update detailed status
        const overlayDetailedStatus = document.getElementById('overlay-detailed-status');
        if (overlayDetailedStatus) {
          overlayDetailedStatus.textContent = 'Ready for Submission';
          overlayDetailedStatus.classList.add('text-success');
          overlayDetailedStatus.classList.remove('text-white');
        }
        
        // Update action buttons
        const actionButtons = document.getElementById('overlay-action-buttons');
        if (actionButtons) {
          actionButtons.innerHTML = `
            <button id="overlay-submit-btn" class="btn btn-success">
              <i class="fas fa-check-circle me-1"></i>Submit Audition Now
            </button>
          `;
          
          // Add event listener to submit button
          setTimeout(() => {
            const submitNowBtn = document.getElementById('overlay-submit-btn');
            if (submitNowBtn) {
              submitNowBtn.addEventListener('click', () => {
                loadingOverlay.classList.add('d-none');
                document.getElementById('audition-form').submit();
              });
            }
          }, 100);
          
          // Auto-hide overlay after 3 seconds unless user interacted with it
          setTimeout(() => {
            if (!loadingOverlay.dataset.userInteracted) {
              loadingOverlay.classList.add('d-none');
            }
          }, 3000);
        }
      }
      
      // Show success message
      const progressText = document.getElementById('upload-progress-text');
      if (progressText) {
        progressText.textContent = 'Video ready!';
        progressText.style.color = 'green';
        progressText.style.fontWeight = 'bold';
      }
      
      // Update progress bar style for completion
      const progressBar = document.getElementById('upload-progress-bar');
      if (progressBar) {
        progressBar.classList.remove('progress-bar-animated');
        progressBar.classList.remove('progress-bar-striped');
        progressBar.classList.add('bg-success');
        progressBar.style.width = '100%';
      }
      
      // Update overlay progress bar style
      const overlayBar = document.getElementById('overlay-upload-progress-bar');
      if (overlayBar) {
        overlayBar.classList.remove('progress-bar-animated');
        overlayBar.classList.remove('progress-bar-striped');
        overlayBar.classList.add('bg-success');
        overlayBar.style.width = '100%';
      }
      
      // Update status messages
      document.getElementById('upload-status-uploading').classList.add('d-none');
      document.getElementById('upload-status-processing').classList.add('d-none');
      document.getElementById('upload-status-complete').classList.remove('d-none');
      
      // Enable submit button with visual enhancements
      const submitButton = document.getElementById('submit-btn');
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.classList.remove('btn-secondary');
        submitButton.classList.add('btn-success');
        submitButton.innerHTML = '<i class="fas fa-check-circle me-2"></i>Submit Audition';
      }
      
      // Add event listener to the continue button
      const continueButton = document.getElementById('continue-submit-btn');
      if (continueButton) {
        continueButton.addEventListener('click', function() {
          const form = document.getElementById('audition-form');
          if (form) {
            // Show submission in progress
            showSubmissionInProgress();
            // Submit the form
            form.submit();
          }
        });
      }
    },
    
    // Handle upload errors
    onError: (error) => {
      console.error('Upload error:', error);
      
      // Hide loading overlay
      const loadingOverlay = document.getElementById('loading-overlay');
      if (loadingOverlay) {
        loadingOverlay.classList.add('d-none');
      }
      
      // Update status messages
      document.getElementById('upload-status-uploading').classList.add('d-none');
      document.getElementById('upload-status-processing').classList.add('d-none');
      document.getElementById('upload-status-error').classList.remove('d-none');
      document.getElementById('upload-status-error').querySelector('span').textContent = 
        `Error: ${error.message || 'Unknown error during upload'}`;
    },
    
    // Additional event handler for when the file upload is done but processing hasn't finished yet
    onUploadComplete: () => {
      console.log('File upload complete, now processing...');
      
      // Update status messages
      document.getElementById('upload-status-uploading').classList.add('d-none');
      document.getElementById('upload-status-processing').classList.remove('d-none');
    }
  });
}

// Enhanced form submission with upload progress
function enhanceFormSubmission() {
  const form = document.querySelector('.needs-validation');
  
  // Add custom validation for phone number
  const phoneInput = document.getElementById('phone');
  if (phoneInput) {
    phoneInput.addEventListener('input', function(e) {
      const value = e.target.value;
      // Basic phone validation - allow digits, spaces, dashes, plus, and parentheses
      if (value && value.length >= 7 && /^[0-9\-+() ]{7,}$/.test(value)) {
        e.target.classList.remove('is-invalid');
        e.target.classList.add('is-valid');
        e.target.setCustomValidity('');
      } else {
        e.target.classList.remove('is-valid');
        e.target.classList.add('is-invalid');
        e.target.setCustomValidity('Please enter a valid phone number with at least 7 digits');
      }
    });
  }
  
  // Add a function to bypass validation and force submission
  window.forceFormSubmission = function() {
    console.log('Forcing form submission bypassing validation');
    
    // First try regular submission
    const submitButton = document.getElementById('submit-btn');
    if (submitButton) {
      submitButton.disabled = false;
      submitButton.click();
    }
    
    // If that didn't work, submit directly
    setTimeout(() => {
      form.noValidate = true;
      form.submit();
    }, 200);
  };
  
  form.addEventListener('submit', function(event) {
    // For debugging: log all form data
    const formData = new FormData(form);
    const formDataObj = {};
    for (let [key, value] of formData.entries()) {
      formDataObj[key] = value;
    }
    console.log('Form data being submitted:', formDataObj);
    
    // Get video file input status
    const videoInput = document.getElementById('video');
    const hasVideoFile = videoInput && videoInput.files && videoInput.files.length > 0;
    const hasVideoId = document.getElementById('video_url') && document.getElementById('video_url').value;
    const videoUrl = document.getElementById('video_url') ? document.getElementById('video_url').value : 'not found';
    
    console.log('Form submission state:', { 
      hasVideoFile, 
      hasVideoId, 
      videoUrl,
      uploaderInitialized: window.uploaderInitialized || false 
    });
    
    // Perform custom phone validation
    const phoneInput = document.getElementById('phone');
    if (phoneInput) {
      const value = phoneInput.value;
      if (value && value.length >= 7 && /^[0-9\-+() ]{7,}$/.test(value)) {
        phoneInput.setCustomValidity('');
      } else {
        phoneInput.setCustomValidity('Please enter a valid phone number with at least 7 digits');
      }
    }
    
    // CASE 1: User selected video but didn't wait for upload (handled by secure-upload.js)
    
    // CASE 2: User didn't select any video file - normal form validation
    if (!hasVideoFile) {
      console.log('No video file selected, proceeding with normal form validation');
      if (!form.checkValidity()) {
        event.preventDefault();
        event.stopPropagation();
        form.classList.add('was-validated');
        
        // Highlight invalid fields for better visibility
        const invalidFields = form.querySelectorAll(':invalid');
        invalidFields.forEach(field => {
          console.log(`Invalid field: ${field.id || field.name} - ${field.validationMessage}`);
        });
        
        return;
      }
      return true; // Allow submission
    }
    
    // CASE 3: User has video ID - allow submission with final validation check
    if (hasVideoId) {
      console.log('Video ID present, allowing submission with validation');
      
      // Still run validation, but don't check for video
      if (!form.checkValidity()) {
        event.preventDefault();
        event.stopPropagation();
        form.classList.add('was-validated');
        
        // Highlight invalid fields for better visibility
        const invalidFields = form.querySelectorAll(':invalid');
        invalidFields.forEach(field => {
          console.log(`Invalid field: ${field.id || field.name} - ${field.validationMessage}`);
        });
        
        return;
      }
      
      // Show submission in progress UI
      showSubmissionInProgress();
      return true; // Allow submission
    }
    
    // CASE 4: User selected video file but no ID yet (upload completed but processing failed)
    console.log('Video selected but no ID, checking if upload is still in progress');
    
    const progressElement = document.getElementById('upload-progress');
    const uploadInProgress = progressElement && 
                           parseInt(progressElement.value || '0') > 0 && 
                           parseInt(progressElement.value || '0') < 100;
    
    if (uploadInProgress) {
      console.log('Upload still in progress, secure-upload.js will handle this');
      event.preventDefault();
      event.stopPropagation();
      alert('Please wait for the video upload to complete before submitting.');
      return false;
    }
    
    // Otherwise run normal validation
    // Run original validation first
    if (!form.checkValidity()) {
      event.preventDefault();
      event.stopPropagation();
      form.classList.add('was-validated');
      
      // Highlight invalid fields for better visibility
      const invalidFields = form.querySelectorAll(':invalid');
      invalidFields.forEach(field => {
        console.log(`Invalid field: ${field.id || field.name} - ${field.validationMessage}`);
      });
      
      return;
    }

    // Check for file validation errors
    const fileErrors = form.querySelectorAll('.file-error');
    if (fileErrors.length > 0) {
      event.preventDefault();
      event.stopPropagation();
      return;
    }

    // Only show loading overlay for form submission with profile pictures
    // (video is handled by secure uploader)
    const profileFiles = document.getElementById('profile_pictures').files;
    
    let totalSize = 0;
    if (profileFiles) {
      Array.from(profileFiles).forEach(file => totalSize += file.size);
    }

    // Update loading message based on file sizes
    if (totalSize > 0) {
      if (totalSize > 100 * 1024 * 1024) { // > 100MB
        updateLoadingMessage('Large files detected. This may take several minutes...', totalSize);
      } else if (totalSize > 10 * 1024 * 1024) { // > 10MB
        updateLoadingMessage('Uploading files. Please wait...', totalSize);
      }

      // Show loading overlay
      document.getElementById('loading-overlay').classList.remove('d-none');
    }
    
    // Show submission in progress UI
    showSubmissionInProgress();

    // Prevent multiple submissions
    form.querySelector('button[type="submit"]').style.pointerEvents = 'none';
  });
}

function updateLoadingMessage(message, totalSize) {
  const loadingText = document.querySelector('#loading-overlay p');
  if (loadingText) {
    loadingText.innerHTML = `${message}<br><small>Total upload size: ${formatFileSize(totalSize)}</small>`;
  }
}

// Function to show submission in progress UI
function showSubmissionInProgress() {
  // Show a full-page loading overlay during submission
  const loadingOverlay = document.getElementById('loading-overlay');
  if (loadingOverlay) {
    // Hide all phases and show submission phase
    document.getElementById('upload-phase').classList.remove('d-none');
    document.getElementById('processing-phase').classList.add('d-none');
    document.getElementById('complete-phase').classList.add('d-none');
    
    // Update overlay title and subtitle
    const statusTitle = document.getElementById('overlay-status-title');
    const statusSubtitle = document.getElementById('overlay-status-subtitle');
    
    if (statusTitle) {
      statusTitle.innerHTML = '<i class="fas fa-paper-plane me-2"></i>Submitting Audition...';
    }
    
    if (statusSubtitle) {
      statusSubtitle.textContent = 'Please wait while we submit your audition. This will only take a moment.';
    }
    
    // Update detailed status
    const overlayDetailedStatus = document.getElementById('overlay-detailed-status');
    if (overlayDetailedStatus) {
      overlayDetailedStatus.textContent = 'Finalizing Submission';
      overlayDetailedStatus.classList.remove('text-success');
      overlayDetailedStatus.classList.add('text-white');
    }
    
    // Update action buttons - no actions during submission
    const actionButtons = document.getElementById('overlay-action-buttons');
    if (actionButtons) {
      actionButtons.innerHTML = '';
    }
    
    // Set progress bar to indeterminate state
    const overlayBar = document.getElementById('overlay-upload-progress-bar');
    if (overlayBar) {
      overlayBar.classList.add('progress-bar-animated', 'progress-bar-striped');
      overlayBar.classList.remove('bg-success');
      overlayBar.style.width = '100%';
    }
    
    const overlayText = document.getElementById('overlay-upload-progress-text');
    if (overlayText) {
      overlayText.textContent = 'Processing...';
    }
    
    // Show the overlay
    loadingOverlay.classList.remove('d-none');
  }
  
  // Disable the submit button and show spinner
  const submitButton = document.getElementById('submit-btn');
  if (submitButton) {
    submitButton.disabled = true;
    submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Submitting...';
  }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  // Initialize the secure uploader
  initializeSecureUploader();
  
  // Attach profile pictures handler
  const profileInput = document.getElementById('profile_pictures');
  if (profileInput) {
    profileInput.addEventListener('change', handleProfilePicturesSelection);
  }
  
  // Attach video selection handler for timing uploads
  const videoInput = document.getElementById('video');
  if (videoInput) {
    videoInput.addEventListener('change', handleVideoSelection);
  }

  // Enhance form submission
  enhanceFormSubmission();
  
  // Add event listener to form submission
  const form = document.getElementById('audition-form');
  const submitButton = document.getElementById('submit-btn');
  
  if (form && submitButton) {
    submitButton.addEventListener('click', function(event) {
      // If the form is valid and about to be submitted, show loading UI
      if (form.checkValidity() && !event.defaultPrevented) {
        showSubmissionInProgress();
      }
    });
  }
  
  // Initialize loading overlay interaction tracking
  const loadingOverlay = document.getElementById('loading-overlay');
  if (loadingOverlay) {
    loadingOverlay.addEventListener('click', function(event) {
      // Only mark as interacted if clicking UI elements, not the backdrop
      if (event.target !== loadingOverlay) {
        loadingOverlay.dataset.userInteracted = 'true';
      }
    });
  }

  // Bootstrap validation for client-side feedback
  (function () {
    'use strict';
    var forms = document.querySelectorAll('.needs-validation');
    Array.prototype.slice.call(forms).forEach(function (form) {
      form.addEventListener('submit', function(event) {
        // Prevent the HTML validation error from showing before our custom validation
        if (!this.checkValidity()) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      });
    });
  })();
});

// Make clearVideoSelection global for onclick handler
window.clearVideoSelection = clearVideoSelection;
</script>
